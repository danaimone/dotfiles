set clipboard+=unnamed
set clipboard+=ideaput

" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Do incremental searching.
set incsearch

" Don't use Ex mode, use Q for formatting.
map Q gq

" Editing and Reloading this config
:map \e :e ~/.ideavimrc
:map \r <Action>(IdeaVim.ReloadVimRc.reload)

" Remaps escape key
:map <C-a> <Esc>

let mapleader=" "

" Toggles distraction free mode using Ctrl->Z
:map <c-z> <Action>(ToggleDistractionFreeMode)

" Opens up terminal on Ctrl->T, alternatively " t" for terminal at ~
:map <c-t> <Action>(ActivateTerminalToolWindow)
:map <leader>t <Action>(Terminal.OpenInTerminal)

" Splitting windows using Idea actions
:map <c-\> <Action>(SplitVertically)
:map <c--> <Action>(SplitHorizontally)
:map <c-=> <Action>(Unsplit)
:map <c-m> <Action>(MoveEditorToOppositeTabGroup)

" Allowing vim to handle our split navigation
sethandler <c-j> a:vim
sethandler <c-k> a:vim
:map <c-h> <c-w>h
:map <c-l> <c-w>l
:map <c-j> <c-w>j
:map <c-k> <c-w>k

" Mapping tab and shift->tab to handle window navigation in IDE
:map <TAB> <Action>(PreviousTab)
:map <s-TAB> <Action>(NextTab)

" Setting up leader en leader h to edit in new window and go to next window
:map <leader>en <Action>(EditSourceInNewWindow)
:map <leader>h <Action>(NextWindow)

" Closing handling through IDE
:map <leader>q <Action>(CloseContent)
:map <leader>qa <Action>(CloseAllEditors)

" Handling indenting
:vnoremap < <gv
:vnoremap > >gv

" Movement between methods
:map [[ <Action>(MethodUp)
:map ]] <Action>(MethodDown)

" Collapsing code
:map zc <Action>(CollapseRegion)
:map zo <Action>(ExpandRegion)
:map <leader>zc <Action>(CollapseAllRegions)
:map <leader>zo <Action>(ExpandAllRegions)

" Commenting
:map <leader>c <Action>(CommentByLineComment)

" Pop up refactoring menu
:map <leader>r <Action>(Refactorings.QuickListPopupAction)

" Reformatting and optimizing
:map <leader>= <Action>(ReformatCode)
:map <leader>o <Action>(OptimizeImports)

" File history in IDE
:map <c-r> <Action>(RecentFiles)
:map <leader>l <Action>(RecentLocations)
:map <leader>h <Action>(LocalHistory.ShowHistory)

" Navigating to errors
:map ge <Action>(GotoNextError)
:map gE <Action>(GotoPreviousError)

" Replacing vim's searching and source code navigation with built in
:map <c-/> <Action>(FindInPath)
:map <c-a> <Action>(GotoAction)
:map <c-f> <Action>(GotoFile)
:map <leader>u <Action> (FindUsages)

:map <leader>s <Action>(GotoRelated)
:map <leader>h <Action>(CallHierarchy)
:map <leader>b <Action>(ShowNavBar)
:map <c-s> <Action>(FileStructurePopup)
:map <c-o> <Action>(GotoSymbol)
:map gc <Action>(GotoClass)
:map gi <Action>(GotoImplementation)
:map gd <Action>(GotToDeclaration)
:map gp <Action>(GotToSuperMethod)
:map gt <Action>(GotoTest)
:map gb <Action>(Back)
:map gf <Action>(Forward)

" Tool windows
:map <c-p> <Action>(JumpToLastWindow)
:map <c-x> <Action>(HideAllWindows)

" Debugging
:map ,r <Action>(ContextRun)
:map ,c <Action>(RunClass)
:map ,f <Action>(ChooseRunConfiguration)
:map ,t <Action>(ActivateRunToolWindow)
:map ,u <Action>(Rerun)
:map <leader>,f <Action>(RerunFailedTests)
:map ,b <Action>(ToggleLineBreakpoint)
:map ,d <Action>(ContextDebug)
:map ,n <Action>(ActivateDebugToolWindow)

" Enabling plugins
set surround
set ideajoin
set idearefactormode=keep

